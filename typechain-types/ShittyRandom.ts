/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ShittyRandomInterface extends utils.Interface {
  contractName: "ShittyRandom";
  functions: {
    "getLegionWeight(uint256,uint256)": FunctionFragment;
    "requestRandomNumber(uint256)": FunctionFragment;
    "sampleRandomGridCellCoords(uint256)": FunctionFragment;
    "stakeLegion(uint256,uint256)": FunctionFragment;
    "userLegionWeights(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getLegionWeight",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sampleRandomGridCellCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeLegion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLegionWeights",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLegionWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sampleRandomGridCellCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeLegion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLegionWeights",
    data: BytesLike
  ): Result;

  events: {
    "ArrayOfIndices(uint256[])": EventFragment;
    "ArrayOfSampledCellCoords(uint8[2][])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArrayOfIndices"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArrayOfSampledCellCoords"): EventFragment;
}

export type ArrayOfIndicesEvent = TypedEvent<
  [BigNumber[]],
  { arg0: BigNumber[] }
>;

export type ArrayOfIndicesEventFilter = TypedEventFilter<ArrayOfIndicesEvent>;

export type ArrayOfSampledCellCoordsEvent = TypedEvent<
  [[number, number][]],
  { arg0: [number, number][] }
>;

export type ArrayOfSampledCellCoordsEventFilter =
  TypedEventFilter<ArrayOfSampledCellCoordsEvent>;

export interface ShittyRandom extends BaseContract {
  contractName: "ShittyRandom";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShittyRandomInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLegionWeight(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRandomNumber(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sampleRandomGridCellCoords(
      _number_of_cells: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeLegion(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userLegionWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getLegionWeight(
    _row: BigNumberish,
    _col: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRandomNumber(
    number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sampleRandomGridCellCoords(
    _number_of_cells: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeLegion(
    _row: BigNumberish,
    _col: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userLegionWeights(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getLegionWeight(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestRandomNumber(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sampleRandomGridCellCoords(
      _number_of_cells: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number][]>;

    stakeLegion(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userLegionWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ArrayOfIndices(uint256[])"(arg0?: null): ArrayOfIndicesEventFilter;
    ArrayOfIndices(arg0?: null): ArrayOfIndicesEventFilter;

    "ArrayOfSampledCellCoords(uint8[2][])"(
      arg0?: null
    ): ArrayOfSampledCellCoordsEventFilter;
    ArrayOfSampledCellCoords(arg0?: null): ArrayOfSampledCellCoordsEventFilter;
  };

  estimateGas: {
    getLegionWeight(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRandomNumber(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sampleRandomGridCellCoords(
      _number_of_cells: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeLegion(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userLegionWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLegionWeight(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sampleRandomGridCellCoords(
      _number_of_cells: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeLegion(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userLegionWeights(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
