/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface WorldBoss2Interface extends utils.Interface {
  contractName: "WorldBoss2";
  functions: {
    "attackArms(uint8)": FunctionFragment;
    "attackBody(uint8)": FunctionFragment;
    "attackHead(uint8)": FunctionFragment;
    "attackLeg(uint8)": FunctionFragment;
    "claimRewardsOnDeath()": FunctionFragment;
    "isBossStillAlive()": FunctionFragment;
    "magic()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attackArms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attackBody",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attackHead",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attackLeg",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsOnDeath",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBossStillAlive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "magic", values?: undefined): string;

  decodeFunctionResult(functionFragment: "attackArms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attackBody", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attackHead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "attackLeg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsOnDeath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBossStillAlive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "magic", data: BytesLike): Result;

  events: {};
}

export interface WorldBoss2 extends BaseContract {
  contractName: "WorldBoss2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldBoss2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attackArms(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attackBody(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attackHead(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attackLeg(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardsOnDeath(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isBossStillAlive(overrides?: CallOverrides): Promise<[boolean]>;

    magic(overrides?: CallOverrides): Promise<[string]>;
  };

  attackArms(
    _skill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attackBody(
    _skill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attackHead(
    _skill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attackLeg(
    _skill: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewardsOnDeath(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isBossStillAlive(overrides?: CallOverrides): Promise<boolean>;

  magic(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    attackArms(_skill: BigNumberish, overrides?: CallOverrides): Promise<void>;

    attackBody(_skill: BigNumberish, overrides?: CallOverrides): Promise<void>;

    attackHead(_skill: BigNumberish, overrides?: CallOverrides): Promise<void>;

    attackLeg(_skill: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimRewardsOnDeath(overrides?: CallOverrides): Promise<void>;

    isBossStillAlive(overrides?: CallOverrides): Promise<boolean>;

    magic(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    attackArms(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attackBody(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attackHead(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attackLeg(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewardsOnDeath(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isBossStillAlive(overrides?: CallOverrides): Promise<BigNumber>;

    magic(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attackArms(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attackBody(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attackHead(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attackLeg(
      _skill: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardsOnDeath(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isBossStillAlive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    magic(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
