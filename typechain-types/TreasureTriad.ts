/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CardStatsStruct = {
  n: BigNumberish;
  e: BigNumberish;
  s: BigNumberish;
  w: BigNumberish;
  card_affinity: BigNumberish;
  tokenId: BigNumberish;
  card_name: string;
};

export type CardStatsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  string
] & {
  n: BigNumber;
  e: BigNumber;
  s: BigNumber;
  w: BigNumber;
  card_affinity: number;
  tokenId: BigNumber;
  card_name: string;
};

export type GridCellStruct = {
  card_name: string;
  tokenId: string;
  player: BigNumberish;
  cell_affinity: BigNumberish;
};

export type GridCellStructOutput = [string, string, number, number] & {
  card_name: string;
  tokenId: string;
  player: number;
  cell_affinity: number;
};

export interface TreasureTriadInterface extends utils.Interface {
  contractName: "TreasureTriad";
  functions: {
    "convertedCards()": FunctionFragment;
    "corruptedCellCount()": FunctionFragment;
    "emptyCell()": FunctionFragment;
    "getCardStatsAtCell(uint256,uint256)": FunctionFragment;
    "getConvertedCards()": FunctionFragment;
    "getCorruptedCard()": FunctionFragment;
    "getCorruptedCellCount()": FunctionFragment;
    "getGridCell(uint256,uint256)": FunctionFragment;
    "grid(uint256,uint256)": FunctionFragment;
    "gridCols()": FunctionFragment;
    "gridRows()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "naturePlacesInitialAffinities(uint256)": FunctionFragment;
    "naturePlacesInitialCards(uint256)": FunctionFragment;
    "recalcCorruptedCells()": FunctionFragment;
    "setCellWithAffinity(uint256,uint256,uint8)": FunctionFragment;
    "shittyRandom()": FunctionFragment;
    "stakeMultipleCardsAndFinishGame(uint256[2][],string[],uint8)": FunctionFragment;
    "stakeTreasureCard(uint256,uint256,string,uint8)": FunctionFragment;
    "stakeTreasureCardAsNature(uint256,uint256,string)": FunctionFragment;
    "ttCardStats()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "convertedCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "corruptedCellCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "emptyCell", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCardStatsAtCell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConvertedCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCorruptedCard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCorruptedCellCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGridCell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gridCols", values?: undefined): string;
  encodeFunctionData(functionFragment: "gridRows", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "naturePlacesInitialAffinities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "naturePlacesInitialCards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recalcCorruptedCells",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCellWithAffinity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shittyRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeMultipleCardsAndFinishGame",
    values: [[BigNumberish, BigNumberish][], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTreasureCard",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTreasureCardAsNature",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ttCardStats",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "convertedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "corruptedCellCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emptyCell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCardStatsAtCell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConvertedCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCorruptedCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCorruptedCellCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGridCell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gridCols", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gridRows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "naturePlacesInitialAffinities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "naturePlacesInitialCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recalcCorruptedCells",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCellWithAffinity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shittyRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeMultipleCardsAndFinishGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTreasureCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTreasureCardAsNature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ttCardStats",
    data: BytesLike
  ): Result;

  events: {
    "CardStaked(uint256,uint256,string,uint8)": EventFragment;
    "CardStatsAtCell(uint256,uint256,uint256,uint256,uint8,uint256,string)": EventFragment;
    "GameEndingStats(int256,int256)": EventFragment;
    "NaturesInitialAffinityCells(uint8[2][])": EventFragment;
    "NaturesInitialCells(uint8[2][])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CardStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CardStatsAtCell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameEndingStats"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NaturesInitialAffinityCells"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NaturesInitialCells"): EventFragment;
}

export type CardStakedEvent = TypedEvent<
  [BigNumber, BigNumber, string, number],
  { arg0: BigNumber; arg1: BigNumber; arg2: string; arg3: number }
>;

export type CardStakedEventFilter = TypedEventFilter<CardStakedEvent>;

export type CardStatsAtCellEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber, string],
  {
    arg0: BigNumber;
    arg1: BigNumber;
    arg2: BigNumber;
    arg3: BigNumber;
    arg4: number;
    arg5: BigNumber;
    arg6: string;
  }
>;

export type CardStatsAtCellEventFilter = TypedEventFilter<CardStatsAtCellEvent>;

export type GameEndingStatsEvent = TypedEvent<
  [BigNumber, BigNumber],
  { arg0: BigNumber; arg1: BigNumber }
>;

export type GameEndingStatsEventFilter = TypedEventFilter<GameEndingStatsEvent>;

export type NaturesInitialAffinityCellsEvent = TypedEvent<
  [[number, number][]],
  { arg0: [number, number][] }
>;

export type NaturesInitialAffinityCellsEventFilter =
  TypedEventFilter<NaturesInitialAffinityCellsEvent>;

export type NaturesInitialCellsEvent = TypedEvent<
  [[number, number][]],
  { arg0: [number, number][] }
>;

export type NaturesInitialCellsEventFilter =
  TypedEventFilter<NaturesInitialCellsEvent>;

export interface TreasureTriad extends BaseContract {
  contractName: "TreasureTriad";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasureTriadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    convertedCards(overrides?: CallOverrides): Promise<[BigNumber]>;

    corruptedCellCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    emptyCell(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        card_name: string;
        tokenId: string;
        player: number;
        cell_affinity: number;
      }
    >;

    getCardStatsAtCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConvertedCards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCorruptedCard(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCorruptedCellCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGridCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GridCellStructOutput]>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        card_name: string;
        tokenId: string;
        player: number;
        cell_affinity: number;
      }
    >;

    gridCols(overrides?: CallOverrides): Promise<[BigNumber]>;

    gridRows(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    naturePlacesInitialAffinities(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    naturePlacesInitialCards(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recalcCorruptedCells(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCellWithAffinity(
      _row: BigNumberish,
      _col: BigNumberish,
      _affinity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shittyRandom(overrides?: CallOverrides): Promise<[string]>;

    stakeMultipleCardsAndFinishGame(
      _coords: [BigNumberish, BigNumberish][],
      _card_names: string[],
      _player: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTreasureCard(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      _player: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTreasureCardAsNature(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ttCardStats(overrides?: CallOverrides): Promise<[string]>;
  };

  convertedCards(overrides?: CallOverrides): Promise<BigNumber>;

  corruptedCellCount(overrides?: CallOverrides): Promise<BigNumber>;

  emptyCell(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number] & {
      card_name: string;
      tokenId: string;
      player: number;
      cell_affinity: number;
    }
  >;

  getCardStatsAtCell(
    _row: BigNumberish,
    _col: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConvertedCards(overrides?: CallOverrides): Promise<BigNumber>;

  getCorruptedCard(overrides?: CallOverrides): Promise<BigNumber>;

  getCorruptedCellCount(overrides?: CallOverrides): Promise<BigNumber>;

  getGridCell(
    _row: BigNumberish,
    _col: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GridCellStructOutput>;

  grid(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number] & {
      card_name: string;
      tokenId: string;
      player: number;
      cell_affinity: number;
    }
  >;

  gridCols(overrides?: CallOverrides): Promise<BigNumber>;

  gridRows(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _gridSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  naturePlacesInitialAffinities(
    _number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  naturePlacesInitialCards(
    _number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recalcCorruptedCells(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCellWithAffinity(
    _row: BigNumberish,
    _col: BigNumberish,
    _affinity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shittyRandom(overrides?: CallOverrides): Promise<string>;

  stakeMultipleCardsAndFinishGame(
    _coords: [BigNumberish, BigNumberish][],
    _card_names: string[],
    _player: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTreasureCard(
    _row: BigNumberish,
    _col: BigNumberish,
    _card_name: string,
    _player: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTreasureCardAsNature(
    _row: BigNumberish,
    _col: BigNumberish,
    _card_name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ttCardStats(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    convertedCards(overrides?: CallOverrides): Promise<BigNumber>;

    corruptedCellCount(overrides?: CallOverrides): Promise<BigNumber>;

    emptyCell(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        card_name: string;
        tokenId: string;
        player: number;
        cell_affinity: number;
      }
    >;

    getCardStatsAtCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<CardStatsStructOutput>;

    getConvertedCards(overrides?: CallOverrides): Promise<BigNumber>;

    getCorruptedCard(overrides?: CallOverrides): Promise<BigNumber>;

    getCorruptedCellCount(overrides?: CallOverrides): Promise<BigNumber>;

    getGridCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GridCellStructOutput>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        card_name: string;
        tokenId: string;
        player: number;
        cell_affinity: number;
      }
    >;

    gridCols(overrides?: CallOverrides): Promise<BigNumber>;

    gridRows(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _gridSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    naturePlacesInitialAffinities(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    naturePlacesInitialCards(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recalcCorruptedCells(overrides?: CallOverrides): Promise<BigNumber>;

    setCellWithAffinity(
      _row: BigNumberish,
      _col: BigNumberish,
      _affinity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shittyRandom(overrides?: CallOverrides): Promise<string>;

    stakeMultipleCardsAndFinishGame(
      _coords: [BigNumberish, BigNumberish][],
      _card_names: string[],
      _player: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    stakeTreasureCard(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      _player: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTreasureCardAsNature(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ttCardStats(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CardStaked(uint256,uint256,string,uint8)"(
      arg0?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null
    ): CardStakedEventFilter;
    CardStaked(
      arg0?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null
    ): CardStakedEventFilter;

    "CardStatsAtCell(uint256,uint256,uint256,uint256,uint8,uint256,string)"(
      arg0?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null,
      arg4?: null,
      arg5?: null,
      arg6?: null
    ): CardStatsAtCellEventFilter;
    CardStatsAtCell(
      arg0?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null,
      arg4?: null,
      arg5?: null,
      arg6?: null
    ): CardStatsAtCellEventFilter;

    "GameEndingStats(int256,int256)"(
      arg0?: null,
      arg1?: null
    ): GameEndingStatsEventFilter;
    GameEndingStats(arg0?: null, arg1?: null): GameEndingStatsEventFilter;

    "NaturesInitialAffinityCells(uint8[2][])"(
      arg0?: null
    ): NaturesInitialAffinityCellsEventFilter;
    NaturesInitialAffinityCells(
      arg0?: null
    ): NaturesInitialAffinityCellsEventFilter;

    "NaturesInitialCells(uint8[2][])"(
      arg0?: null
    ): NaturesInitialCellsEventFilter;
    NaturesInitialCells(arg0?: null): NaturesInitialCellsEventFilter;
  };

  estimateGas: {
    convertedCards(overrides?: CallOverrides): Promise<BigNumber>;

    corruptedCellCount(overrides?: CallOverrides): Promise<BigNumber>;

    emptyCell(overrides?: CallOverrides): Promise<BigNumber>;

    getCardStatsAtCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConvertedCards(overrides?: CallOverrides): Promise<BigNumber>;

    getCorruptedCard(overrides?: CallOverrides): Promise<BigNumber>;

    getCorruptedCellCount(overrides?: CallOverrides): Promise<BigNumber>;

    getGridCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gridCols(overrides?: CallOverrides): Promise<BigNumber>;

    gridRows(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    naturePlacesInitialAffinities(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    naturePlacesInitialCards(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recalcCorruptedCells(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCellWithAffinity(
      _row: BigNumberish,
      _col: BigNumberish,
      _affinity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shittyRandom(overrides?: CallOverrides): Promise<BigNumber>;

    stakeMultipleCardsAndFinishGame(
      _coords: [BigNumberish, BigNumberish][],
      _card_names: string[],
      _player: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTreasureCard(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      _player: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTreasureCardAsNature(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ttCardStats(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    convertedCards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    corruptedCellCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emptyCell(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCardStatsAtCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConvertedCards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCorruptedCard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCorruptedCellCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGridCell(
      _row: BigNumberish,
      _col: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gridCols(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gridRows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    naturePlacesInitialAffinities(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    naturePlacesInitialCards(
      _number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recalcCorruptedCells(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCellWithAffinity(
      _row: BigNumberish,
      _col: BigNumberish,
      _affinity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shittyRandom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeMultipleCardsAndFinishGame(
      _coords: [BigNumberish, BigNumberish][],
      _card_names: string[],
      _player: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTreasureCard(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      _player: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTreasureCardAsNature(
      _row: BigNumberish,
      _col: BigNumberish,
      _card_name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ttCardStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
