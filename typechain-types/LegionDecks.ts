/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LegionDecksInterface extends utils.Interface {
  contractName: "LegionDecks";
  functions: {
    "addDeck(uint256,string[])": FunctionFragment;
    "getLegionDeck(uint256)": FunctionFragment;
    "removeDeck(uint256)": FunctionFragment;
    "ttCardStats()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addDeck",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLegionDeck",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDeck",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ttCardStats",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addDeck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLegionDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDeck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ttCardStats",
    data: BytesLike
  ): Result;

  events: {
    "AddedLegionDeck(uint256,string[])": EventFragment;
    "RemovedLegionDeck(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedLegionDeck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedLegionDeck"): EventFragment;
}

export type AddedLegionDeckEvent = TypedEvent<
  [BigNumber, string[]],
  { arg0: BigNumber; arg1: string[] }
>;

export type AddedLegionDeckEventFilter = TypedEventFilter<AddedLegionDeckEvent>;

export type RemovedLegionDeckEvent = TypedEvent<
  [BigNumber],
  { arg0: BigNumber }
>;

export type RemovedLegionDeckEventFilter =
  TypedEventFilter<RemovedLegionDeckEvent>;

export interface LegionDecks extends BaseContract {
  contractName: "LegionDecks";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LegionDecksInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDeck(
      _legionId: BigNumberish,
      _cardnames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLegionDeck(
      _legionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    removeDeck(
      _legionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ttCardStats(overrides?: CallOverrides): Promise<[string]>;
  };

  addDeck(
    _legionId: BigNumberish,
    _cardnames: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLegionDeck(
    _legionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  removeDeck(
    _legionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ttCardStats(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addDeck(
      _legionId: BigNumberish,
      _cardnames: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getLegionDeck(
      _legionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeDeck(
      _legionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ttCardStats(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedLegionDeck(uint256,string[])"(
      arg0?: null,
      arg1?: null
    ): AddedLegionDeckEventFilter;
    AddedLegionDeck(arg0?: null, arg1?: null): AddedLegionDeckEventFilter;

    "RemovedLegionDeck(uint256)"(arg0?: null): RemovedLegionDeckEventFilter;
    RemovedLegionDeck(arg0?: null): RemovedLegionDeckEventFilter;
  };

  estimateGas: {
    addDeck(
      _legionId: BigNumberish,
      _cardnames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLegionDeck(
      _legionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDeck(
      _legionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ttCardStats(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addDeck(
      _legionId: BigNumberish,
      _cardnames: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLegionDeck(
      _legionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDeck(
      _legionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ttCardStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
